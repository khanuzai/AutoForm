import { useState, useRef } from 'react'
import { saveAs } from 'file-saver'
import { detectPDFFields, fillPDFWithData } from '../logic/pdfFieldDetector'

const PDFUploader = ({ profile, onFilledPDF }) => {
  const [pdfFile, setPdfFile] = useState(null)
  const [isProcessing, setIsProcessing] = useState(false)
  const [detectedFields, setDetectedFields] = useState([])
  const [error, setError] = useState('')
  const fileInputRef = useRef(null)

  const handleFileUpload = async (event) => {
    const file = event.target.files[0]
    if (!file) return
    if (file.type !== 'application/pdf' && file.type !== 'text/plain') {
      setError('Please upload a PDF or TXT file')
      return
    }
    setPdfFile(file)
    setError('')
    setDetectedFields([])
    await processPDFFields(file)
  }

  const processPDFFields = async (file) => {
    setIsProcessing(true)
    try {
      const fields = await detectPDFFields(file)
      setDetectedFields(fields)
      if (fields.length === 0) {
        setError('No form fields detected. Make sure your PDF contains text fields or labels.')
      }
    } catch (err) {
      setError('Error processing PDF: ' + err.message)
    } finally {
      setIsProcessing(false)
    }
  }

  const fillPDF = async () => {
    if (!pdfFile || detectedFields.length === 0) {
      setError('Please upload a PDF and ensure fields are detected')
      return
    }
    setIsProcessing(true)
    setError('')
    try {
      console.log('Starting PDF fill process...')
      console.log('Profile data:', profile)
      console.log('Detected fields:', detectedFields)
      
      const { pdfDoc, filledFields } = await fillPDFWithData(pdfFile, profile)
      console.log('PDF filled successfully, filled fields:', filledFields)
      
      const filledPdfBytes = await pdfDoc.save()
      const blob = new Blob([filledPdfBytes], { type: 'application/pdf' })
      const originalName = pdfFile.name.replace('.pdf', '')
      const filledName = `${originalName}_filled.pdf`
      
      console.log('Saving PDF as:', filledName)
      saveAs(blob, filledName)
      
      if (onFilledPDF) {
        onFilledPDF(blob, filledName)
      }
      setError('')
    } catch (err) {
      console.error('Error in fillPDF:', err)
      setError('Error filling PDF: ' + err.message)
    } finally {
      setIsProcessing(false)
    }
  }

  const generateSamplePDF = () => {
    setIsProcessing(true);
    setError('');
    try {
      console.log('Generating sample text form...');
      const formContent = `
Sample Application Form
========================

Name: _________________
Email: ________________
Phone: ________________
Address: _______________
Age: __________________
Education: _____________
Experience: ____________
Skills: ________________
Goals: _________________
Interests: _____________

Generated by AutoForm
Date: ${new Date().toLocaleDateString()}
      `.trim();
      
      const blob = new Blob([formContent], { type: 'text/plain' });
      saveAs(blob, 'sample_application_form.txt');
      
      console.log('Sample form generated and saved successfully.');
    } catch (err) {
      console.error('Error generating sample form:', err);
      setError('Error generating form: ' + err.message);
    } finally {
      setIsProcessing(false);
    }
  };

  const clearFile = () => {
    setPdfFile(null)
    setDetectedFields([])
    setError('')
    if (fileInputRef.current) {
      fileInputRef.current.value = ''
    }
  }

  return (
    <div className="space-y-6">
      {/* Sample PDF Button */}
      <div className="glass-card rounded-3xl p-6 hover-card">
        <div className="flex items-center space-x-4 mb-4">
          <div className="w-10 h-10 bg-gradient-to-br from-purple-500 to-pink-500 rounded-2xl flex items-center justify-center shadow-lg">
            <span className="text-white text-lg">üìã</span>
          </div>
          <div>
            <h4 className="text-lg font-bold text-gray-900">Get Started</h4>
            <p className="text-gray-600 text-sm">Generate a sample text form to test the feature</p>
          </div>
        </div>
        
        <button onClick={generateSamplePDF} disabled={isProcessing} className="w-full modern-button bg-gradient-to-r from-purple-600 to-pink-600 text-white py-3 px-6 font-semibold disabled:opacity-50 disabled:cursor-not-allowed inverted-hover">
          {isProcessing ? (
            <div className="flex items-center justify-center space-x-3">
              <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
              <span>Generating...</span>
            </div>
          ) : (
            <div className="flex items-center justify-center space-x-3">
              <span>üìã</span>
              <span>Generate Sample Text Form</span>
            </div>
          )}
        </button>
      </div>
      
      {/* File Upload */}
      <div className="glass-card rounded-3xl p-8 hover-card">
        <div className="flex items-center space-x-4 mb-6">
          <div className="w-12 h-12 bg-gradient-to-br from-blue-500 to-indigo-500 rounded-2xl flex items-center justify-center shadow-lg">
            <span className="text-white text-xl">üìÑ</span>
          </div>
          <div>
            <h3 className="text-xl font-bold text-gray-900">Form Filler</h3>
            <p className="text-gray-600 text-sm">Upload a text or PDF form and fill it with your profile data</p>
          </div>
        </div>
        
        <div className="space-y-6">
          {/* File Upload */}
          <div>
            <label className="block text-sm font-semibold text-gray-700 mb-3">Upload Form</label>
            <input ref={fileInputRef} type="file" accept=".pdf,.txt" onChange={handleFileUpload} className="block w-full text-sm text-gray-500 file:mr-4 file:py-3 file:px-6 file:rounded-2xl file:border-0 file:text-sm file:font-semibold file:bg-gradient-to-r file:from-blue-50 file:to-indigo-50 file:text-blue-700 hover:file:from-blue-100 hover:file:to-indigo-100 transition-all duration-300" />
          </div>

          {/* File Info */}
          {pdfFile && (
            <div className="p-4 bg-gradient-to-br from-green-50 to-emerald-50 border border-green-200 rounded-2xl">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  <div className="w-8 h-8 bg-gradient-to-br from-green-500 to-emerald-500 rounded-full flex items-center justify-center">
                    <span className="text-white text-sm">üìé</span>
                  </div>
                  <div>
                    <p className="text-sm font-semibold text-green-800">{pdfFile.name}</p>
                    <p className="text-xs text-green-600">Size: {(pdfFile.size / 1024).toFixed(1)} KB</p>
                  </div>
                </div>
                <button onClick={clearFile} className="text-red-500 hover:text-red-700 transition-colors">‚úï</button>
              </div>
            </div>
          )}

          {/* Detected Fields */}
          {detectedFields.length > 0 && (
            <div>
              <h4 className="text-sm font-semibold text-gray-700 mb-3">Detected Fields ({detectedFields.length})</h4>
              <div className="grid grid-cols-2 gap-3 max-h-32 overflow-y-auto">
                {detectedFields.map((field, index) => (
                  <div key={index} className="bg-gradient-to-r from-gray-50 to-gray-100 p-3 rounded-xl border border-gray-200">
                    <div className="font-medium text-sm text-gray-900">{field.field}</div>
                    <div className="text-xs text-gray-500">Page {field.page}</div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Fill PDF Button */}
          {pdfFile && detectedFields.length > 0 && (
            <button onClick={fillPDF} disabled={isProcessing} className="w-full modern-button bg-gradient-to-r from-green-600 to-emerald-600 text-white py-4 px-8 text-lg font-semibold disabled:opacity-50 disabled:cursor-not-allowed inverted-hover">
              {isProcessing ? (
                <div className="flex items-center justify-center space-x-3">
                  <div className="w-6 h-6 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                  <span>Processing PDF...</span>
                </div>
              ) : (
                <div className="flex items-center justify-center space-x-3">
                  <span>üñäÔ∏è</span>
                  <span>Fill PDF Form</span>
                </div>
              )}
            </button>
          )}

          {/* Error Message */}
          {error && (
            <div className="p-4 bg-red-50 border border-red-200 rounded-2xl text-red-700 text-sm fade-in-up">
              {error}
            </div>
          )}

          {/* Instructions */}
          <div className="p-4 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-2xl border border-blue-100">
            <div className="flex items-start space-x-3">
              <div className="w-6 h-6 bg-gradient-to-br from-blue-500 to-indigo-500 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
                <span className="text-white text-xs">üí°</span>
              </div>
              <div>
                <p className="text-sm font-medium text-gray-900 mb-2">How it works</p>
                <ul className="text-sm text-gray-600 space-y-1">
                  <li>‚Ä¢ Generate a sample PDF form to test the feature</li>
                  <li>‚Ä¢ Upload a PDF form with text fields or labels</li>
                  <li>‚Ä¢ AI detects form fields automatically</li>
                  <li>‚Ä¢ Uses your profile data to fill the form</li>
                  <li>‚Ä¢ Downloads the filled PDF</li>
                </ul>
                <p className="mt-2 text-xs text-gray-500">
                  <strong>Supported:</strong> PDF forms with text fields, labels like "Name:", "Email:", etc.
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

export default PDFUploader 